package graph;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;



public class PermutationSwap {
	
	static ArrayList<ArrayList<Integer>> graph;
	static int[] start;
	static int[] end;
	static int[] dfs_num;
	
	
	
	public static void bfs(int u,int label){
		Queue<Integer> q=new LinkedList<>();
		q.add(u);
		start[u]=start[label];
		end[u]=end[label];
		dfs_num[u]=0;
		while(!q.isEmpty()){
			
			int tmp=q.remove();
			for(int i=0;i<graph.get(tmp).size();i++){
				int nbr=graph.get(tmp).get(i);
				if(dfs_num[nbr]==-1){
					start[nbr]=start[label];
					end[nbr]=end[label];
					dfs_num[nbr]=dfs_num[tmp]+1;
					q.add(nbr);
				}
					
			}
			
			
		}
		
		
		
		
		
	}
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int t=scanner.nextInt();
		while(t--!=0){
			
			int n=scanner.nextInt();
			int m=scanner.nextInt();
			start=new int[n];
			end=new int[n];
			graph=new ArrayList<>();
			for(int i=0;i<n;i++){
				start[i]=scanner.nextInt();
			}
			
			
			
			for(int i=0;i<n;i++){
				end[i]=scanner.nextInt();
			}
			
			
			for(int i=0;i<n;i++){
				graph.add(new ArrayList<>());
				
			}
			
			
			for(int i=0;i<m;i++){
				int a=scanner.nextInt()-1;
				int b=scanner.nextInt()-1;
				graph.get(a).add(b);
				graph.get(b).add(a);
				
			}
			dfs_num=new int[n];
			
			Arrays.fill(dfs_num,-1);
			
			for(int i=0;i<n;i++){
			
				if(dfs_num[i]==-1)
					bfs(i,i);
			}
			
			boolean flag=true;
			for(int i=0;i<n;i++){
				if(start[i]!=end[i]){
					flag=false;
					break;
				}
			}
			
			if(flag) System.out.println("YES");
			else
				System.out.println("NO");
			
		}
		
	}
	
	

}
